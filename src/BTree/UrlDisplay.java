/*Keith Fosmire
 CSC365
 Due 4 March 2014
 */
package BTree;
/*
 *This is the GUI. It initatiates the search process in real time. Soon it will be optional for current
 *or stored information. Calling the appropriate classes to add categories and search the Inventory.
 *allows user to interface with the program with simplicity. Provides try catches for the lack of internet
 *or malformed URLS.
 */

import java.util.*;
import java.net.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jsoup.*;

public class UrlDisplay extends javax.swing.JFrame {
// I have not used this properly..or at all

    Inventory inventory = new Inventory();

    public UrlDisplay() {
        initComponents();
        try { //all methods called are subject to throw an exception

            int t = 0;
            //Initializes when Search button is pressed
            ArrayList<Category> motorcycles = populateMotorcycle();
            ArrayList<Category> guitars = populateGuitar();
            ArrayList<Category> news = populateNews();
            //adding to inventory
            while (t < guitars.size()) {
                inventory.insertURL(guitars.get(t));
                ++t;
            }

            t = 0;
            //adding to inventory
            while (t < motorcycles.size()) {
                inventory.insertURL(motorcycles.get(t));
                ++t;
            }
            t = 0;
            //adding to inventory
            while (t < news.size()) {
                inventory.insertURL(news.get(t));
                ++t;
            }
            //finding the category for users URL
            int keys = inventory.totalKeys();
            String keyStr = "" + keys + "";
            //textField1.setText(keyStr);
            inventory.printTree();
            // String found= inventory.findCategory(testUrl(textUrl));
            //  jTextArea1.setText(textUrl+" Belongs to the "+found+" category.");

        }//try ended
        //someting didnt work
        catch (Exception ex) {
            Logger.getLogger(UrlDisplay.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textField1 = new java.awt.TextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        textField2 = new java.awt.TextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Web Page Categorizer");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Please Enter Search Word: ");
        jLabel1.setAutoscrolls(true);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Please Enter Word to Delete:");
        jLabel2.setToolTipText("");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textField1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(textField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(textField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem6.setText("Save");
        jMenu1.add(jMenuItem6);

        jMenuItem1.setText("Exit");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu5.setText("Edit Categories");

        jMenuItem4.setText("News");
        jMenu5.add(jMenuItem4);

        jMenuItem2.setText("Guitars");
        jMenuItem2.setToolTipText("");
        jMenu5.add(jMenuItem2);

        jMenuItem3.setText("Motorcycles");
        jMenu5.add(jMenuItem3);

        jMenu2.add(jMenu5);

        jMenuItem5.setText("Add Category");
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//this is auto generated by JFame
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String key = textField1.getText();
        jTextArea1.append(" \n");
        textField1.setText("Searching...");
        ArrayList<String> words;
        words = inventory.search(key);
        Set<String> word = new HashSet();
        word.addAll(words);
        int i = 0;
        Iterator it = word.iterator();
        if (word.isEmpty()) {
            jTextArea1.append("search results=0");
        } else {
            while (it.hasNext()) {
                jTextArea1.append(it.next() + "\n");
                ++i;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String key = textField2.getText();
        inventory.delete(key);
        jTextArea1.append("deleted\n");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    //populates the motorcycle categories, soon it will write to a file
    private static ArrayList populateMotorcycle() throws Exception {

        int j = 0;
        ArrayList<String> urls = new ArrayList<>();
        urls.add(0, "https://www.denniskirk.com/");
        urls.add(1, "http://www.jpcycles.com/");
        urls.add(2, "http://www.bikebandit.com/");
        urls.add(3, "http://www.motorcycle-superstore.com/");
        urls.add(4, "http://rideapart.com/");
        urls.add(5, "http://www.cycleworld.com/");
        urls.add(6, "http://www.motorcycle-usa.com/");
        urls.add(7, "http://news.motorbiker.org/blogs.nsf");
        urls.add(8, "http://www.sportrider.com/");
        urls.add(9, "http://www.motorcyclenews.com/");
        urls.add(10, "http://www.motorcycle.com/");
        ArrayList<Category> categories = new ArrayList();

        while (j < 11) {
            int i = 0;
            categories.add(j, new MotorcycleCategory(urls.get(j)));
            ArrayList<String> data = new ArrayList();
            try {
                URL guitar = new URL(urls.get(j));
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(guitar.openStream()));
                while (in.readLine() != null) {
                    String test = in.readLine();

                    if (test != null && Jsoup.parse(test, "UTF-8").select("body").text().trim().length() > 4) {
                        if (Jsoup.parse(test, "UTF-8").select("body").text().trim().length() < 100) {
                            data.add(i, Jsoup.parse(test, "UTF-8").select("body").text().trim());
                            ++i;
                        }
                    }
                }
            } catch (MalformedURLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            Iterator it = data.iterator();
            while (it.hasNext()) {
                String[] temp = it.next().toString().toLowerCase().split(" ");
                for (int k = 0; k < temp.length; ++k) {
                    String test = temp[k].trim();
                    if (test.charAt(0) > 96 && test.charAt(0) < 123) {

                        if (test.length() > 4 && test.length() < 20) {
                            if (!filterWords(test).equalsIgnoreCase("fail")) {
                                categories.get(j).setInventory(test);
                            }
                        }
                    }
                }
            }
            ++j;
        }
        return categories;
    }

    private static ArrayList populateGuitar() throws Exception {
        int j = 0;
        ArrayList<String> urls = new ArrayList<>();
        urls.add(0, "http://www.guitarcenter.com");
        urls.add(1, "http://www.musiciansfriend.com");
        urls.add(2, "http://www.fender.com/");
        urls.add(3, "http://www.schecterguitars.com/");
        urls.add(4, "http://www.ultimate-guitar.com/");
        urls.add(5, "http://www.justinguitar.com/");
        urls.add(6, "http://www.gibson.com/");
        urls.add(7, "http://www.guitarworld.com/");
        urls.add(8, "http://www.premierguitar.com/");
        ArrayList<Category> categories = new ArrayList();
        while (j < 9) {
            int i = 0;
            categories.add(j, new GuitarCategory(urls.get(j)));
            ArrayList<String> data = new ArrayList();
            try {
                URL guitar = new URL(urls.get(j));
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(guitar.openStream()));
                while (in.readLine() != null) {
                    String test = in.readLine();

                    if (test != null && Jsoup.parse(test, "UTF-8").select("body").text().trim().length() > 4) {
                        if (Jsoup.parse(test, "UTF-8").select("body").text().trim().length() < 100) {
                            data.add(i, Jsoup.parse(test, "UTF-8").select("body").text().trim());
                            ++i;
                        }
                    }
                }
            } catch (MalformedURLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            Iterator it = data.iterator();
            while (it.hasNext()) {
                String[] temp = it.next().toString().toLowerCase().split(" ");
                for (int k = 0; k < temp.length; ++k) {
                    String test = temp[k].trim();
                    if (test.charAt(0) > 96 && test.charAt(0) < 123) {

                        if (test.length() > 4 && test.length() < 20) {
                            if (!filterWords(test).equalsIgnoreCase("fail")) {
                                categories.get(j).setInventory(test);
                            }
                        }
                    }
                }
            }
            ++j;
        }
        return categories;
    }

    private static ArrayList populateNews() throws Exception {

        int j = 0;
        ArrayList<String> urls = new ArrayList<>();
        urls.add(0, "http://www.foxnews.com/");
        urls.add(1, "http://www.cnn.com/");
        urls.add(2, "https://news.google.com/");
        urls.add(3, "http://www.newyorker.com/");
        urls.add(4, "http://www.drum.army.mil/news/");
        ArrayList<Category> categories = new ArrayList();
        ArrayList update = new ArrayList();

        while (j < 5) {

            int i = 0;
            categories.add(j, new NewsCategory(urls.get(j)));
            ArrayList<String> data = new ArrayList();
            try {
                URL guitar = new URL(urls.get(j));
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(guitar.openStream()));

                while (in.readLine() != null) {
                    String test = in.readLine();

                    if (test != null && Jsoup.parse(test, "UTF-8").select("body").text().trim().length() > 4) {
                        if (Jsoup.parse(test, "UTF-8").select("body").text().trim().length() < 100 && Jsoup.parse(test, "UTF-8").select("body").text().trim().length() > 4) {
                            data.add(i, Jsoup.parse(test, "UTF-8").select("body").text().trim());

                            ++i;
                        }
                    }
                }
            } catch (MalformedURLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
            int p = 0;

            Iterator it = data.iterator();
            while (it.hasNext()) {

                String[] temp = it.next().toString().toLowerCase().split(" ");

                for (int k = 0; k < temp.length; ++k) {
                    String test = temp[k].trim();
                    if (test.charAt(0) > 96 && test.charAt(0) < 123) {

                        if (test.length() > 4 && test.length() < 20) {
                            if (!filterWords(test).equalsIgnoreCase("fail")) {

                                categories.get(j).setInventory(test);
                            }

                        }
                    }
                }
                ++p;
            }
            ++j;
        }
        return categories;
    }

    public static ArrayList<String> testUrl(String url) throws Exception {
        int j = 0;
        int i = 0;
        ArrayList<String> urls = new ArrayList<>();
        ArrayList<String> data = new ArrayList();
        try {
            URL guitar = new URL(url);
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(guitar.openStream()));

            while (in.readLine() != null) {
                String test = in.readLine();

                if (test != null && Jsoup.parse(test, "UTF-8").select("body").text().trim().length() > 4) {
                    if (Jsoup.parse(test, "UTF-8").select("body").text().trim().length() < 100) {
                        data.add(i, Jsoup.parse(test, "UTF-8").select("body").text().trim());
                        ++i;
                    }
                }
            }
        } catch (MalformedURLException e) {
            JOptionPane.showConfirmDialog(null, e);
        }

        Iterator it = data.iterator();
        while (it.hasNext()) {

            String[] temp = it.next().toString().toLowerCase().split(" ");

            for (int k = 0; k < temp.length; ++k) {
                String test = temp[k].trim();

                if (test.charAt(0) > 96 && test.charAt(0) < 123) {

                    if (test.length() > 4 && test.length() < 20) {

                        if (!filterWords(test).equalsIgnoreCase("fail")) {

                            urls.add(test);
                        }
                    }
                }
            }

        }
        ++j;

        return urls;
    }

    public static String filterWords(String word) {
        String filtered = word;
        String noGos = "public,you'll ,updated,videos,photos,content,copyright,server,value,function,access,allow,service,status,enable,cookie,cookies,return,check,guide,estimate,privacy,compare,payments,english,español,terms,policy,mobile,financial,services,signature,posts,community,newsroom,other,media,registration,featured,foundation,center,region,e-news,follow,true,change,custom,downloads,catalog,product,price,lists,contact,video,support,register,visitor,owner,loading,accessories,orders,shipping,ship,header,through,date,watch,post,catch,their,product,them,review,connect,google,twitter,instagram,facebook,youtube,about,create,parts,contact,email,results,what's,more,from,object,send,links,link,next,object ";
        String[] noGo = noGos.split(",");
        int i = 0;
        while (i < noGo.length) {
            if (filtered.equalsIgnoreCase(noGo[i])) {
                filtered = "fail";
                ++i;
            }
            ++i;
        }
        if (filtered.contains("\'") || filtered.contains(",") || filtered.contains("Â") || filtered.contains("_") || filtered.contains("|") || filtered.contains(":") || filtered.contains(")") || filtered.contains("(") || filtered.contains(".")) {
            filtered = "fail";
        } else if (filtered.contains("€") || filtered.contains("=") || filtered.contains(";") || filtered.contains("?") || filtered.contains("$") || filtered.contains("%") || filtered.contains("&") || filtered.contains("!")) {
            filtered = "fail";
        }

        return filtered;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.TextField textField1;
    private java.awt.TextField textField2;
    // End of variables declaration//GEN-END:variables
}
